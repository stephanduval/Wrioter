diff --git a/app/Http/Controllers/MessageController.php b/app/Http/Controllers/MessageController.php
index f5b0015..c95c7de 100644
--- a/app/Http/Controllers/MessageController.php
+++ b/app/Http/Controllers/MessageController.php
@@ -148,7 +148,6 @@ public function store(Request $request)
             $rules['project_data.service_type'] = 'required|in:translation,revision,modifications,transcription,voice_over,other';
             $rules['project_data.service_description'] = 'nullable|string';
             $rules['project_data.deadline'] = 'required|date_format:Y-m-d';
-            $rules['project_data.latest_completion_date'] = 'required|date_format:Y-m-d';
         }
         
         // Add validation for attachments (optional array, each file max 10MB)
@@ -165,11 +164,7 @@ public function store(Request $request)
         $user = Auth::user();
         $userRole = $user->roles->first()?->name;
         
-        Log::info('MessageController::store - User role:', ['role' => $userRole]);
-        Log::info('MessageController::store - Project data:', ['project_data' => $validated['project_data'] ?? null]);
-
-        // Create project if project data is provided (regardless of role)
-        if (isset($validated['project_data'])) {
+        if ($userRole === 'client' && isset($validated['project_data'])) {
             try {
                 $projectData = [
                     'client_id' => $user->id,
@@ -182,7 +177,6 @@ public function store(Request $request)
                     'deadline' => $validated['project_data']['deadline'] ?? $validated['due_date'],
                     'service_type' => $validated['project_data']['service_type'],
                     'service_description' => $validated['project_data']['service_description'] ?? null,
-                    'latest_completion_date' => $validated['project_data']['latest_completion_date'],
                 ];
                 
                 Log::info('MessageController::store - Creating project with data:', $projectData);
@@ -192,14 +186,9 @@ public function store(Request $request)
                 
                 Log::info('MessageController::store - Project created successfully with ID: ' . $project_id);
             } catch (\Exception $e) {
-                Log::error('MessageController::store - Error creating project:', [
-                    'error' => $e->getMessage(),
-                    'trace' => $e->getTraceAsString()
-                ]);
+                Log::error('MessageController::store - Error creating project: ' . $e->getMessage());
                 // Continue with message creation even if project creation fails
             }
-        } else {
-            Log::info('MessageController::store - No project data provided');
         }
 
         $createData = [
diff --git a/app/Models/Project.php b/app/Models/Project.php
index 39438f9..4d65000 100644
--- a/app/Models/Project.php
+++ b/app/Models/Project.php
@@ -19,14 +19,12 @@ class Project extends Model
         'time_preference',
         'deadline',
         'service_type',
-        'service_description',
-        'latest_completion_date'
+        'service_description'
     ];
 
     protected $casts = [
         'deadline' => 'date',
         'date_requested' => 'datetime',
-        'latest_completion_date' => 'date'
     ];
 
     /**
diff --git a/config/cors.php b/config/cors.php
index 9104651..0e2a992 100755
--- a/config/cors.php
+++ b/config/cors.php
@@ -3,7 +3,7 @@
 return [
     'paths' => ['api/*', 'sanctum/csrf-cookie'],
     'allowed_methods' => ['*'],
-    'allowed_origins' => ['http://localhost:5173', 'http://localhost:8000', 'http://127.0.0.1:5173', 'http://127.0.0.1:8000'],
+    'allowed_origins' => ['*'],
     'allowed_origins_patterns' => [],
     'allowed_headers' => ['*'],
     'exposed_headers' => [],
diff --git a/config/sanctum.php b/config/sanctum.php
index c8b51c6..9b7d5ff 100755
--- a/config/sanctum.php
+++ b/config/sanctum.php
@@ -15,11 +15,7 @@
     |
     */
 
-    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
-        '%s%s',
-        'localhost:5173,localhost:8000,127.0.0.1:5173,127.0.0.1:8000',
-        Sanctum::currentApplicationUrlWithPort()
-    ))),
+    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', '')),
 
 
     /*
@@ -76,8 +72,9 @@
     */
 
     'middleware' => [
-        'verify_csrf_token' => App\Http\Middleware\VerifyCsrfToken::class,
-        'encrypt_cookies' => App\Http\Middleware\EncryptCookies::class,
+        'authenticate_session' => Laravel\Sanctum\Http\Middleware\AuthenticateSession::class,
+        'encrypt_cookies' => Illuminate\Cookie\Middleware\EncryptCookies::class,
+        'validate_csrf_token' => Illuminate\Foundation\Http\Middleware\ValidateCsrfToken::class,
     ],
 
 ];
diff --git a/database/migrations/2025_05_07_212051_add_latest_completion_date_to_projects_table.php b/database/migrations/2025_05_07_212051_add_latest_completion_date_to_projects_table.php
deleted file mode 100644
index abdfcca..0000000
--- a/database/migrations/2025_05_07_212051_add_latest_completion_date_to_projects_table.php
+++ /dev/null
@@ -1,28 +0,0 @@
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-return new class extends Migration
-{
-    /**
-     * Run the migrations.
-     */
-    public function up(): void
-    {
-        Schema::table('projects', function (Blueprint $table) {
-            $table->date('latest_completion_date')->nullable()->after('deadline');
-        });
-    }
-
-    /**
-     * Reverse the migrations.
-     */
-    public function down(): void
-    {
-        Schema::table('projects', function (Blueprint $table) {
-            $table->dropColumn('latest_completion_date');
-        });
-    }
-};
diff --git a/resources/js/axios.ts b/resources/js/axios.ts
index 3a09cae..6a2f522 100755
--- a/resources/js/axios.ts
+++ b/resources/js/axios.ts
@@ -6,36 +6,4 @@ axios.defaults.baseURL = import.meta.env.MODE === 'development'
   ? 'http://127.0.0.1:8000/api'
   : 'https://stephandouglasduval.com/api'
 
-// Add request interceptor to include auth token
-axios.interceptors.request.use(
-  (config) => {
-    // Get token from localStorage
-    const token = localStorage.getItem('accessToken')
-    if (token) {
-      config.headers.Authorization = `Bearer ${token}`
-    }
-    return config
-  },
-  (error) => {
-    return Promise.reject(error)
-  }
-)
-
-// Add response interceptor to handle 401 errors
-axios.interceptors.response.use(
-  (response) => response,
-  async (error) => {
-    if (error.response?.status === 401) {
-      // Clear auth data and redirect to login
-      localStorage.removeItem('accessToken')
-      localStorage.removeItem('userData')
-      window.location.href = '/login'
-    }
-    return Promise.reject(error)
-  }
-)
-
-// Enable credentials (cookies) for cross-origin requests
-axios.defaults.withCredentials = true
-
 export default axios
diff --git a/resources/ts/pages/apps/projects/list/index.vue b/resources/ts/pages/apps/projects/list/index.vue
index 01e1b5c..895b3e1 100644
--- a/resources/ts/pages/apps/projects/list/index.vue
+++ b/resources/ts/pages/apps/projects/list/index.vue
@@ -1,46 +1,97 @@
 <script setup lang="ts">
+import axios from 'axios'
+import { format, isBefore, isToday } from 'date-fns'
 import { computed, onMounted, ref, watch } from 'vue'
 import { useRouter } from 'vue-router'
 
+// Configure axios
+const apiBaseUrl = import.meta.env.VITE_API_BASE_URL || '/api'
+
+const router = useRouter()
+
 interface Project {
   id: number
   title: string
   property?: string
+  time_preference?: string
   service_type?: string
+  service_description?: string
   deadline?: string
-  latest_completion_date?: string
   status: string
+  created_at: string
+  updated_at: string
+  client_id?: number
   client?: {
+    id: number
+    name: string
+    email: string
+  }
+  company?: {
+    id: number
     name: string
   }
 }
 
 interface ProjectsResponse {
   data: Project[]
-  total: number
+  meta: {
+    current_page: number
+    from: number
+    last_page: number
+    per_page: number
+    to: number
+    total: number
+  }
 }
 
-const router = useRouter()
-
-// Data table options
+// Data
 const searchQuery = ref('')
-const itemsPerPage = ref(10)
+const statusFilter = ref('all')
+const serviceTypeFilter = ref('all')
+const clientFilter = ref('')
+const deadlineFilter = ref('all')
 const page = ref(1)
-const sortBy = ref('')
-const orderBy = ref('')
-const selectedRows = ref([])
+const perPage = ref(10)
+const sortBy = ref('created_at')
+const sortDesc = ref(true)
+const isLoading = ref(true)
+const projectsData = ref<ProjectsResponse | null>(null)
+const clients = ref<{ id: number, name: string }[]>([])
+const serviceTypes = ref<string[]>([])
+
+// Computed
+const projects = computed(() => projectsData.value?.data || [])
+const totalProjects = computed(() => projectsData.value?.meta?.total || 0)
 
-// Headers
+// Table headers
 const headers = [
-  { title: 'Title', key: 'title' },
-  { title: 'Client', key: 'client' },
-  { title: 'Service Type', key: 'service_type' },
-  { title: 'Deadline', key: 'deadline' },
-  { title: 'Latest Completion Date', key: 'latest_completion_date' },
-  { title: 'Status', key: 'status' },
+  { title: 'ID', key: 'id', sortable: true },
+  { title: 'Title', key: 'title', sortable: true },
+  { title: 'Client', key: 'client.name', sortable: true },
+  { title: 'Service Type', key: 'service_type', sortable: true },
+  { title: 'Deadline', key: 'deadline', sortable: true },
+  { title: 'Status', key: 'status', sortable: true },
+  { title: 'Created', key: 'created_at', sortable: true },
   { title: 'Actions', key: 'actions', sortable: false },
 ]
 
+// Status options
+const statusOptions = [
+  { title: 'All', value: 'all' },
+  { title: 'Pending', value: 'pending' },
+  { title: 'Active', value: 'active' },
+  { title: 'Completed', value: 'completed' },
+  { title: 'Cancelled', value: 'cancelled' },
+]
+
+// Deadline filter options
+const deadlineOptions = [
+  { title: 'All', value: 'all' },
+  { title: 'Today', value: 'today' },
+  { title: 'Upcoming', value: 'upcoming' },
+  { title: 'Past Due', value: 'past' },
+]
+
 // Status color mapping
 const statusColorMap: Record<string, string> = {
   pending: 'warning',
@@ -49,176 +100,361 @@ const statusColorMap: Record<string, string> = {
   cancelled: 'error',
 }
 
-// 👉 Fetching projects
-const { data: projectsData, execute: fetchProjects } = useApi<ProjectsResponse>(() => {
-  const params = new URLSearchParams({
-    page: String(page.value),
-    itemsPerPage: String(itemsPerPage.value),
-    sortBy: sortBy.value || '',
-    sortDesc: orderBy.value === 'desc' ? '1' : '0',
-    search: searchQuery.value,
-  }).toString()
-
-  return `/projects?${params}`
-}, {
-  method: 'GET',
-  headers: {
-    'Content-Type': 'application/json',
-    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
-  },
-  credentials: 'include',
-})
-
-const projects = computed(() => projectsData.value?.data || [])
-const totalProjects = computed(() => projectsData.value?.total || 0)
+// Methods
+const fetchProjects = async () => {
+  isLoading.value = true
+  
+  try {
+    const params = new URLSearchParams()
+    
+    if (searchQuery.value) params.append('search', searchQuery.value)
+    if (statusFilter.value !== 'all') params.append('status', statusFilter.value)
+    if (serviceTypeFilter.value !== 'all') params.append('service_type', serviceTypeFilter.value)
+    if (clientFilter.value) params.append('client_id', clientFilter.value)
+    if (deadlineFilter.value !== 'all') params.append('deadline', deadlineFilter.value)
+    
+    params.append('page', page.value.toString())
+    params.append('per_page', perPage.value.toString())
+    params.append('sort_by', sortBy.value)
+    params.append('sort_desc', sortDesc.value ? '1' : '0')
+    
+    const response = await axios.get(`${apiBaseUrl}/projects`, { params })
+    projectsData.value = response.data
+    
+    // Extract unique service types for filter
+    if (projects.value.length && !serviceTypes.value.length) {
+      const uniqueTypes = new Set<string>()
+      projects.value.forEach(project => {
+        if (project.service_type) uniqueTypes.add(project.service_type)
+      })
+      serviceTypes.value = Array.from(uniqueTypes)
+    }
+  } catch (error) {
+    console.error('Error fetching projects:', error)
+  } finally {
+    isLoading.value = false
+  }
+}
 
-// Update options
-const updateOptions = (options: any) => {
-  if (options.sortBy?.length) {
-    sortBy.value = options.sortBy[0]?.key
-    orderBy.value = options.sortBy[0]?.order
+const fetchClients = async () => {
+  try {
+    const response = await axios.get(`${apiBaseUrl}/clients`)
+    clients.value = response.data.data
+  } catch (error) {
+    console.error('Error fetching clients:', error)
   }
+}
 
-  page.value = options.page || 1
-  itemsPerPage.value = options.itemsPerPage || 10
+const formatDate = (date: string) => {
+  if (!date) return 'N/A'
+  return format(new Date(date), 'MMM dd, yyyy')
+}
 
+const handlePageChange = (newPage: number) => {
+  page.value = newPage
   fetchProjects()
 }
 
-// Format date helper
-const formatDate = (date: string) => {
-  if (!date) return 'N/A'
-  return new Date(date).toLocaleDateString()
+const handleSort = ({ key, order }: { key: string, order: boolean | 'asc' | 'desc' }) => {
+  sortBy.value = key
+  sortDesc.value = order === 'desc'
+  fetchProjects()
 }
 
-// Actions
 const viewProject = (id: number) => {
   router.push(`/apps/projects/view/${id}`)
 }
 
+const editProject = (id: number) => {
+  router.push(`/apps/projects/edit/${id}`)
+}
+
 const deleteProject = async (id: number) => {
   if (!confirm('Are you sure you want to delete this project?')) return
   
   try {
-    await $api(`/projects/${id}`, {
-      method: 'DELETE',
-      headers: {
-        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
-      },
-    })
+    await axios.delete(`${apiBaseUrl}/projects/${id}`)
     fetchProjects()
   } catch (error) {
     console.error('Error deleting project:', error)
   }
 }
 
-// Watch for changes
-watch(
-  [searchQuery, itemsPerPage, page, sortBy, orderBy],
-  () => {
-    fetchProjects()
-  },
-)
+// Custom debounce function
+function debounce<T extends (...args: any[]) => any>(
+  fn: T,
+  wait: number
+): (...args: Parameters<T>) => void {
+  let timeout: ReturnType<typeof setTimeout> | null = null
+  
+  return function(this: any, ...args: Parameters<T>): void {
+    if (timeout !== null) {
+      clearTimeout(timeout)
+    }
+    
+    timeout = setTimeout(() => {
+      fn.apply(this, args)
+      timeout = null
+    }, wait)
+  }
+}
 
+// Create debounced search
+const debouncedFetchProjects = debounce(fetchProjects, 500)
+
+// Watch for filter changes
+watch([searchQuery, statusFilter, serviceTypeFilter, clientFilter, deadlineFilter], () => {
+  page.value = 1 // Reset to first page on filter change
+  debouncedFetchProjects()
+})
+
+// Initialize
 onMounted(() => {
   fetchProjects()
+  fetchClients()
 })
 </script>
 
 <template>
   <section>
+    <!-- Header -->
     <VCard class="mb-6">
-      <VCardText class="d-flex flex-wrap gap-4">
-        <div class="me-3 d-flex gap-3">
-          <AppSelect
-            :model-value="itemsPerPage"
-            :items="[
-              { value: 10, title: '10' },
-              { value: 25, title: '25' },
-              { value: 50, title: '50' },
-              { value: 100, title: '100' },
-            ]"
-            style="inline-size: 6.25rem;"
-            @update:model-value="itemsPerPage = parseInt($event, 10)"
-          />
-        </div>
-        <VSpacer />
-
-        <div class="d-flex align-center flex-wrap gap-4">
-          <div style="inline-size: 15.625rem;">
-            <AppTextField v-model="searchQuery" placeholder="Search Project" />
-          </div>
-
+      <VCardItem>
+        <VCardTitle class="text-h5">
+          Projects
+        </VCardTitle>
+        <template #append>
           <VBtn
-            prepend-icon="bx-plus"
+            color="primary"
+            prepend-icon="mdi-plus"
             to="/apps/projects/add"
           >
             Add Project
           </VBtn>
-        </div>
+        </template>
+      </VCardItem>
+    </VCard>
+
+    <!-- Filters -->
+    <VCard class="mb-6">
+      <VCardText>
+        <VRow>
+          <VCol
+            cols="12"
+            sm="6"
+            md="4"
+            lg="3"
+          >
+            <VTextField
+              v-model="searchQuery"
+              density="compact"
+              label="Search"
+              placeholder="Search by title or property"
+              prepend-inner-icon="mdi-magnify"
+              single-line
+              hide-details
+            />
+          </VCol>
+
+          <VCol
+            cols="12"
+            sm="6"
+            md="4"
+            lg="3"
+          >
+            <VSelect
+              v-model="statusFilter"
+              :items="statusOptions"
+              item-title="title"
+              item-value="value"
+              label="Status"
+              density="compact"
+              hide-details
+            />
+          </VCol>
+
+          <VCol
+            cols="12"
+            sm="6"
+            md="4"
+            lg="3"
+          >
+            <VSelect
+              v-model="serviceTypeFilter"
+              :items="[
+                { title: 'All', value: 'all' },
+                ...serviceTypes.map(type => ({ title: type, value: type }))
+              ]"
+              item-title="title"
+              item-value="value"
+              label="Service Type"
+              density="compact"
+              hide-details
+            />
+          </VCol>
+
+          <VCol
+            cols="12"
+            sm="6"
+            md="4"
+            lg="3"
+          >
+            <VSelect
+              v-model="deadlineFilter"
+              :items="deadlineOptions"
+              item-title="title"
+              item-value="value"
+              label="Deadline"
+              density="compact"
+              hide-details
+            />
+          </VCol>
+
+          <VCol
+            v-if="clients.length"
+            cols="12"
+            sm="6"
+            md="4"
+            lg="3"
+          >
+            <VSelect
+              v-model="clientFilter"
+              :items="[
+                { title: 'All Clients', value: '' },
+                ...clients.map(client => ({ title: client.name, value: client.id }))
+              ]"
+              item-title="title"
+              item-value="value"
+              label="Client"
+              density="compact"
+              hide-details
+            />
+          </VCol>
+        </VRow>
       </VCardText>
     </VCard>
 
+    <!-- Projects Table -->
     <VCard>
-      <VDataTableServer
-        v-model:items-per-page="itemsPerPage"
-        v-model:page="page"
-        :items="projects"
-        :headers="headers"
-        :items-length="totalProjects"
-        class="text-no-wrap"
-        @update:options="updateOptions"
-      >
-        <template #item.client="{ item }">
-          <div class="text-body-1">
+      <VCardText>
+        <VDataTableServer
+          v-model:items-per-page="perPage"
+          v-model:page="page"
+          :headers="headers"
+          :items="projects"
+          :items-length="totalProjects"
+          :loading="isLoading"
+          density="comfortable"
+          @update:options="handleSort"
+        >
+          <!-- Client Column -->
+          <template #item.client.name="{ item }">
             {{ item.client?.name || 'N/A' }}
-          </div>
-        </template>
+          </template>
 
-        <template #item.service_type="{ item }">
-          <div class="text-body-1 text-capitalize">
-            {{ item.service_type || 'N/A' }}
-          </div>
-        </template>
+          <!-- Service Type Column -->
+          <template #item.service_type="{ item }">
+            <span v-if="item.service_type">
+              {{ item.service_type }}
+            </span>
+            <span v-else class="text-disabled">
+              N/A
+            </span>
+          </template>
 
-        <template #item.deadline="{ item }">
-          <div class="text-body-1">
-            {{ formatDate(item.deadline) }}
-          </div>
-        </template>
+          <!-- Deadline Column -->
+          <template #item.deadline="{ item }">
+            <div
+              v-if="item.deadline"
+              :class="{
+                'text-error': item.deadline && isBefore(new Date(item.deadline), new Date()) && !isToday(new Date(item.deadline)),
+                'text-warning': item.deadline && isToday(new Date(item.deadline))
+              }"
+            >
+              {{ formatDate(item.deadline) }}
+            </div>
+            <span v-else class="text-disabled">
+              N/A
+            </span>
+          </template>
 
-        <template #item.latest_completion_date="{ item }">
-          <div class="text-body-1">
-            {{ formatDate(item.latest_completion_date) }}
-          </div>
-        </template>
+          <!-- Status Column -->
+          <template #item.status="{ item }">
+            <VChip
+              :color="statusColorMap[item.status]"
+              size="small"
+              class="text-capitalize"
+            >
+              {{ item.status }}
+            </VChip>
+          </template>
 
-        <template #item.status="{ item }">
-          <VChip
-            :color="statusColorMap[item.status]"
-            size="small"
-            class="text-capitalize"
-          >
-            {{ item.status }}
-          </VChip>
-        </template>
+          <!-- Created At Column -->
+          <template #item.created_at="{ item }">
+            {{ formatDate(item.created_at) }}
+          </template>
 
-        <template #item.actions="{ item }">
-          <VBtn
-            icon
-            variant="text"
-            size="small"
-            color="medium-emphasis"
-            @click="viewProject(item.id)"
-          >
-            <VIcon icon="bx-show" />
-          </VBtn>
+          <!-- Actions Column -->
+          <template #item.actions="{ item }">
+            <VBtn
+              icon
+              variant="text"
+              size="small"
+              color="default"
+              @click="viewProject(item.id)"
+            >
+              <VIcon icon="mdi-eye" />
+            </VBtn>
 
-          <IconBtn @click="deleteProject(item.id)">
-            <VIcon icon="bx-trash" />
-          </IconBtn>
-        </template>
-      </VDataTableServer>
+            <VBtn
+              icon
+              variant="text"
+              size="small"
+              color="info"
+              @click="editProject(item.id)"
+            >
+              <VIcon icon="mdi-pencil" />
+            </VBtn>
+
+            <VBtn
+              icon
+              variant="text"
+              size="small"
+              color="error"
+              @click="deleteProject(item.id)"
+            >
+              <VIcon icon="mdi-delete" />
+            </VBtn>
+          </template>
+
+          <!-- No Items Slot -->
+          <template #no-data>
+            <div class="text-center py-6">
+              <VIcon
+                icon="mdi-clipboard-text-outline"
+                size="large"
+                class="mb-2"
+              />
+              <p class="text-body-1">No projects found</p>
+              <VBtn
+                color="primary"
+                @click="fetchProjects"
+              >
+                Reset Filters
+              </VBtn>
+            </div>
+          </template>
+        </VDataTableServer>
+
+        <!-- Pagination -->
+        <div class="d-flex justify-end mt-4">
+          <VPagination
+            v-model="page"
+            :length="projectsData?.meta?.last_page || 1"
+            @update:model-value="handlePageChange"
+          />
+        </div>
+      </VCardText>
     </VCard>
   </section>
 </template>
diff --git a/resources/ts/pages/login.vue b/resources/ts/pages/login.vue
index be70b52..5c0ca87 100755
--- a/resources/ts/pages/login.vue
+++ b/resources/ts/pages/login.vue
@@ -3,7 +3,7 @@ import AuthProvider from '@/views/pages/authentication/AuthProvider.vue'
 import authV2LoginIllustration from '@images/pages/auth-v2-login-illustration.png'
 import { VNodeRenderer } from '@layouts/components/VNodeRenderer'
 import { themeConfig } from '@themeConfig'
-import { useRouter } from 'vue-router'
+import { RouteLocationRaw, useRouter } from 'vue-router'
 import { VForm } from 'vuetify/components/VForm'
 
 definePage({
@@ -55,7 +55,7 @@ const login = async () => {
       headers: {
         'Content-Type': 'application/json',
       },
-      credentials: 'include',
+      credentials: 'include', // Ensure credentials are included
       body: JSON.stringify({
         email: credentials.value.email,
         password: credentials.value.password,
@@ -65,37 +65,68 @@ const login = async () => {
 
     if (!res.ok) {
       const error = await res.json()
+
       errors.value.general = error.message || 'Login failed. Please try again.'
+
       return
     }
 
     const { accessToken, userData, abilityRules } = await res.json()
 
-    // Store auth data
-    localStorage.setItem('accessToken', accessToken)
-    localStorage.setItem('userData', JSON.stringify(userData))
-    localStorage.setItem('abilityRules', JSON.stringify(abilityRules))
+    console.log('Ability Rules received:', abilityRules)
 
+    console.log('User Data:', userData) // Add this line to check the user data
     // Update ability
     ability.update(abilityRules.map((rule: { action: string; subject: string }) => ({
       action: rule.action.toLowerCase(),
       subject: rule.subject.toLowerCase(),
     })))
 
-    // Redirect based on role
-    const userRole = userData.role?.toLowerCase() || 'user'
-    let targetRoute = '/'
+    // Set cookies BEFORE navigation
+    const userDataCookie = useCookie('userData')
+    const abilityCookie = useCookie('userAbilityRules')
+    const tokenCookie = useCookie('accessToken')
+
+    // Set localStorage BEFORE navigation
+    localStorage.setItem('userData', JSON.stringify(userData))
+    localStorage.setItem('abilityRules', JSON.stringify(abilityRules))
+    localStorage.setItem('accessToken', accessToken.toString())
 
-    if (userRole === 'admin') {
-      targetRoute = '/apps/projects/list'
+    // Ensure the values are strings or serialized properly
+    userDataCookie.value = JSON.stringify(userData)
+    abilityCookie.value = JSON.stringify(abilityRules)
+    tokenCookie.value = accessToken.toString()
+
+    console.log('Document.cookie from login.vue', document.cookie)
+
+    // --- Direct Role-Based Redirect ---
+    const userRole = userData.role?.toLowerCase() || 'User';
+    let targetRoute: RouteLocationRaw;
+
+    console.log(`[DEBUG] Determining redirect target for role: ${userRole}`);
+
+    if (userRole === 'admin' || userRole === 'auth') {
+        targetRoute = { name: 'dashboards-analytics' };
+        console.log(`[DEBUG] Target set for admin/auth:`, targetRoute);
     } else if (userRole === 'client') {
-      targetRoute = '/apps/email'
+        targetRoute = { name: 'apps-email' };
+        console.log(`[DEBUG] Target set for client:`, targetRoute);
+    } else if (userRole === 'manager' || userRole === 'user') {
+        targetRoute = { path: '/messages/list' };
+        console.log(`[DEBUG] Target set for manager/user:`, targetRoute);
+    } else {
+        // Fallback if role is unexpected
+        console.warn(`[DEBUG] Unexpected role "${userRole}", defaulting to dashboards-analytics`);
+        targetRoute = { name: 'dashboards-analytics' };
     }
 
-    router.push(targetRoute)
-  } catch (error) {
-    console.error('Login error:', error)
-    errors.value.general = 'An error occurred during login. Please try again.'
+    console.log(`[DEBUG] Attempting router.replace directly from login with:`, targetRoute);
+    router.replace(targetRoute); 
+
+  }
+  catch (err) {
+    console.error('login error', err)
+    errors.value.general = 'An error occurred. Please try again.'
   }
 }
 
diff --git a/resources/ts/plugins/i18n/index.ts b/resources/ts/plugins/i18n/index.ts
index 3b52a2d..45aa73b 100755
--- a/resources/ts/plugins/i18n/index.ts
+++ b/resources/ts/plugins/i18n/index.ts
@@ -1,23 +1,14 @@
-import { cookieRef } from '@layouts/stores/config'
-import { themeConfig } from '@themeConfig'
 import type { App } from 'vue'
 import { createI18n } from 'vue-i18n'
-import vuetifyMessages from './messages/en'
+import { cookieRef } from '@layouts/stores/config'
+import { themeConfig } from '@themeConfig'
 
-const localeMessages = Object.fromEntries(
+const messages = Object.fromEntries(
   Object.entries(
     import.meta.glob<{ default: any }>('./locales/*.json', { eager: true }))
     .map(([key, value]) => [key.slice(10, -5), value.default]),
 )
 
-// Merge Vuetify messages with locale messages
-const messages = {
-  en: {
-    ...localeMessages.en,
-    ...vuetifyMessages,
-  },
-}
-
 let _i18n: any = null
 
 export const getI18n = () => {
diff --git a/resources/ts/plugins/i18n/messages/en.ts b/resources/ts/plugins/i18n/messages/en.ts
deleted file mode 100644
index ff2497b..0000000
--- a/resources/ts/plugins/i18n/messages/en.ts
+++ /dev/null
@@ -1,22 +0,0 @@
-export default {
-  $vuetify: {
-    badge: {
-      content: '{0}'
-    },
-    dataIterator: {
-      loadingText: 'Loading items...',
-      noResultsText: 'No matching records found',
-      noDataText: 'No data available',
-    },
-    dataFooter: {
-      itemsPerPageText: 'Items per page:',
-      itemsPerPageAll: 'All',
-      nextPage: 'Next page',
-      prevPage: 'Previous page',
-      firstPage: 'First page',
-      lastPage: 'Last page',
-      pageText: '{0}-{1} of {2}',
-    },
-  },
-  // ... existing translations ...
-} 
diff --git a/resources/ts/views/apps/email/ComposeDialog.vue b/resources/ts/views/apps/email/ComposeDialog.vue
index e82a633..0185dfc 100755
--- a/resources/ts/views/apps/email/ComposeDialog.vue
+++ b/resources/ts/views/apps/email/ComposeDialog.vue
@@ -14,7 +14,6 @@ const to = ref('')
 const subject = ref('')
 const message = ref('')
 const dueDate = ref<string | null>(null);
-const latestCompletionDate = ref<string | null>(null);
 
 // Project information fields
 const projectTitle = ref('')
@@ -67,7 +66,6 @@ interface ProjectData {
   service_type: string | null
   service_description: string | null
   deadline: string | null
-  latest_completion_date: string | null
 }
 
 // Define message payload interface
@@ -76,17 +74,9 @@ interface MessagePayload {
   company_id: number
   subject: string
   message: string
-  due_date?: string | null
+  due_date: string | null
   attachments: File[]
-  project_data?: {
-    title: string
-    property: string | null
-    time_preference: string
-    service_type: string | null
-    service_description: string | null
-    deadline: string | null
-    latest_completion_date: string | null
-  }
+  project_data?: ProjectData
 }
 
 // Fetch users on component mount
@@ -104,19 +94,12 @@ onMounted(async () => {
       if (!timePreference.value) timePreference.value = 'anytime';
       if (!serviceType.value) serviceType.value = '';
       
-      // Set a default due date if none provided (14 days from now)
+      // Set a default due date if none provided (7 days from now)
       if (!dueDate.value) {
         const defaultDueDate = new Date();
-        defaultDueDate.setDate(defaultDueDate.getDate() + 14);
+        defaultDueDate.setDate(defaultDueDate.getDate() + 7);
         dueDate.value = defaultDueDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD
       }
-
-      // Set a default latest completion date if none provided (21 days from now)
-      if (!latestCompletionDate.value) {
-        const defaultLatestCompletion = new Date();
-        defaultLatestCompletion.setDate(defaultLatestCompletion.getDate() + 21);
-        latestCompletionDate.value = defaultLatestCompletion.toISOString().split('T')[0]; // Format as YYYY-MM-DD
-      }
     }
     
     loading.value = false
@@ -200,10 +183,6 @@ const sendMessage = async () => {
       console.error('Due date is required for client messages');
       return;
     }
-    if (!latestCompletionDate.value) {
-      console.error('Latest completion date is required for client messages');
-      return;
-    }
     if (!timePreference.value) {
       console.error('Time preference is required for client messages');
       return;
@@ -230,15 +209,14 @@ const sendMessage = async () => {
   };
   
   // Add project data if any project fields are filled out
-  if (projectTitle.value || property.value || serviceType.value || timePreference.value || serviceDescription.value || dueDate.value || latestCompletionDate.value) {
+  if (projectTitle.value || property.value || serviceType.value || timePreference.value || serviceDescription.value || dueDate.value) {
     payload.project_data = {
       title: projectTitle.value || '',
       property: property.value || '',
       time_preference: timePreference.value || 'anytime',
       service_type: serviceType.value || '',
       service_description: serviceDescription.value || null,
-      deadline: dueDate.value || null,
-      latest_completion_date: latestCompletionDate.value || null
+      deadline: dueDate.value || null
     };
   }
 
@@ -261,14 +239,13 @@ const sendMessage = async () => {
   }
 }
 
-// Update resetValues to remove deadline
+// Update resetValues to include project fields
 const resetValues = () => {
   to.value = subject.value = '';
   content.value = ''; // Ensure Tiptap content is also reset
   cc.value = bcc.value = '';
   filteredToUsers.value = filteredCcUsers.value = filteredBccUsers.value = [];
   dueDate.value = null; // Reset due date
-  latestCompletionDate.value = null; // Reset latest completion date
   attachmentsRef.value = []; // Clear attachments
   attachmentErrors.value = []; // Clear errors
   
@@ -431,25 +408,6 @@ const resetValues = () => {
 
       <VDivider />
 
-      <div class="px-1 pe-6 py-1">
-        <VTextarea
-          v-model="serviceDescription"
-          density="compact"
-          label="Service Description"
-          placeholder="Describe the service you need"
-          rows="2"
-          auto-grow
-        >
-          <template #prepend-inner>
-            <div class="text-base font-weight-medium text-disabled pt-2">
-              Description:
-            </div>
-          </template>
-        </VTextarea>
-      </div>
-
-      <VDivider />
-
       <div class="px-1 pe-6 py-1">
         <VSelect
           v-model="timePreference"
@@ -473,38 +431,37 @@ const resetValues = () => {
       <VDivider />
 
       <div class="px-1 pe-6 py-1">
-        <VTextField 
-          v-model="dueDate" 
-          density="compact" 
-          type="date"  
-          placeholder="YYYY-MM-DD"
-          :rules="isClient ? [(v: string) => !!v || 'Due date is required'] : undefined"
-          :required="isClient"
-          clearable 
+        <VTextarea
+          v-model="serviceDescription"
+          density="compact"
+          label="Service Description"
+          placeholder="Describe the service you need"
+          rows="2"
+          auto-grow
         >
           <template #prepend-inner>
-            <div class="text-base font-weight-medium text-disabled">
-              Due Date:
+            <div class="text-base font-weight-medium text-disabled pt-2">
+              Description:
             </div>
           </template>
-        </VTextField>
+        </VTextarea>
       </div>
 
       <VDivider />
 
       <div class="px-1 pe-6 py-1">
         <VTextField 
-          v-model="latestCompletionDate" 
+          v-model="dueDate" 
           density="compact" 
           type="date"  
           placeholder="YYYY-MM-DD"
-          :rules="isClient ? [(v: string) => !!v || 'Latest completion date is required'] : undefined"
+          :rules="isClient ? [(v: string) => !!v || 'Due date is required'] : undefined"
           :required="isClient"
           clearable 
         >
           <template #prepend-inner>
             <div class="text-base font-weight-medium text-disabled">
-              Latest Project Completion Date:
+              Due Date:
             </div>
           </template>
         </VTextField>
diff --git a/resources/ts/views/apps/email/useEmail.ts b/resources/ts/views/apps/email/useEmail.ts
index 9b811f3..54b29ce 100755
--- a/resources/ts/views/apps/email/useEmail.ts
+++ b/resources/ts/views/apps/email/useEmail.ts
@@ -166,7 +166,6 @@ export const useEmail = () => {
       service_type: string | null;
       service_description: string | null;
       deadline: string | null;
-      latest_completion_date: string | null;
     };
   }) => {
     console.log(">>> EXECUTING createMessage <<<", payload); 
@@ -202,38 +201,19 @@ export const useEmail = () => {
         if (payload.project_data.deadline) {
           formData.append('project_data[deadline]', payload.project_data.deadline);
         }
-        if (payload.project_data.latest_completion_date) {
-          formData.append('project_data[latest_completion_date]', payload.project_data.latest_completion_date);
-        }
-      }
-
-      // Get access token
-      const accessToken = localStorage.getItem('accessToken');
-      if (!accessToken) {
-        console.error('No access token found');
-        return undefined;
       }
 
-      // Use fetch directly like in sendReplyMessage
-      const response = await fetch('/api/messages', {
-        method: 'POST',
-        body: formData,
-        headers: {
-          'Authorization': `Bearer ${accessToken}`,
-          'Accept': 'application/json',
-        },
+      const response = await $api('/messages', { 
+        method: 'POST', 
+        body: formData 
       });
-
-      if (!response.ok) {
-        const errorData = await response.json().catch(() => ({ message: 'Failed to parse error response.' }));
-        console.error(`Error creating message: ${response.status} ${response.statusText}`, errorData);
+      console.log(">>> createMessage response:", response);
+      if(response && response.message === 'Message sent successfully') { 
+        return response;
+      } else {
+        console.error("createMessage failed:", response);
         return undefined;
       }
-
-      const responseData = await response.json();
-      console.log(">>> createMessage response:", responseData);
-      return responseData;
-
     } catch (error) {
       console.error('Error creating message:', error);
       return undefined;
